scalar DateTime
scalar ConnectionCursor

type Brand {
  id: Int!
  label: String!
  description: String
  products: [Product]
  created_at: DateTime!
  updated_at: DateTime!
}

input CreateBrandInput {
  label: String!
  description: String
  products: [Int]
}

input UpdateBrandInput {
  id: Int!
  label: String
  description: String
  products: [Int]
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: ConnectionCursor
  endCursor: ConnectionCursor
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
}

type BrandEdge {
  node: Brand!
  cursor: ConnectionCursor!
}

input Paging {
  first: Int
  last: Int
  after: ConnectionCursor
  before: ConnectionCursor
}

type Query {
  brands(paging: Paging): BrandConnection!
  brand(id: Int!): Brand
}

type Mutation {
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  updateBrand(updateBrandInput: UpdateBrandInput!): Brand!
  removeBrand(id: Int!): Brand
}
