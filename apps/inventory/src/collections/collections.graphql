scalar DateTime
scalar ConnectionCursor

type Collection {
  id: Int!
  label: String!
  description: String
  created_at: DateTime!
  updated_at: DateTime!
}

input CreateCollectionInput {
  label: String!
  description: String
}

input UpdateCollectionInput {
  id: Int!
  label: String
  description: String
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: ConnectionCursor
  endCursor: ConnectionCursor
}

type CollectionConnection {
  pageInfo: PageInfo!
  edges: [CollectionEdge]!
}

type CollectionEdge {
  node: Collection!
  cursor: ConnectionCursor!
}

input Paging {
  first: Int
  last: Int
  after: ConnectionCursor
  before: ConnectionCursor
}

type Query {
  collections(paging: Paging): CollectionConnection!
  collection(id: Int!): Collection
}

type Mutation {
  createCollection(createCollectionInput: CreateCollectionInput!): Collection!
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection!
  removeCollection(id: Int!): Collection
}
