scalar DateTime
scalar ConnectionCursor

type Product {
  id: Int!
  label: String!
  description: String
  collections: [Collection]
  created_at: DateTime!
  updated_at: DateTime!
}

input CreateProductInput {
  label: String!
  description: String
  collections: [Int]
}

input UpdateProductInput {
  id: Int!
  label: String
  description: String
  collections: [Int]
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: ConnectionCursor
  endCursor: ConnectionCursor
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
}

type ProductEdge {
  node: Product!
  cursor: ConnectionCursor!
}

input Paging {
  first: Int
  last: Int
  after: ConnectionCursor
  before: ConnectionCursor
}

type Query {
  products(paging: Paging): ProductConnection!
  product(id: Int!): Product
}

type Mutation {
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(id: Int!): Product
}
